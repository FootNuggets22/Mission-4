# Base image specification
# Using Node.js version 22 as the base image
# The 'FROM' instruction initializes a new build stage and sets the base image
FROM node:22-alpine

# Set the working directory inside the container
# This creates the directory if it doesn't exist and sets it as the current directory
# All subsequent commands will be executed relative to this directory
WORKDIR /app

# Copy package.json file to the working directory
# This is done before copying all files to leverage Docker's cache mechanism
# If package.json hasn't changed, Docker will reuse the cached layer for npm install
COPY package.json ./

# Install Node.js dependencies defined in package.json
# npm install downloads and installs all dependencies into the node_modules folder
RUN npm install

# Copy all remaining files from the current directory to the working directory in the container
# This includes all application source code and assets
# Note: This is done after npm install to prevent reinstalling dependencies when only code changes
COPY . .

# Document that the container listens on port 3000 at runtime
# This doesn't actually publish the port - it's just documentation
# When running the container, you need to map this port using -p flag (e.g., docker run -p 3000:3000)
EXPOSE 3000

# Define the command to run when the container starts
# CMD instruction provides defaults for executing container
# Here it runs "node server.js" to start the Node.js application
CMD ["node", "server.js"]